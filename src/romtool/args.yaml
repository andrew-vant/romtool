global:
  spec:
    description: Tool for examining and modifying ROMs
  opts:
    -c|--conf: Specify project config file
  flags:
    -v|--verbose: Verbose output
    --debug: Print debug information
    --pdb: Start interactive debugger on crash

dump:
  spec:
    description: Dump all known data to tsv files.
  args:
    rom: ROM file to dump from
    moddir: Send output to this folder
  opts:
    -m|--map: Specify ROM map instead of autodetecting
    -i|--include: Include ips patch data in dump
    -s|--save: Include save file in dump
  flags:
    -f|--force: Overwrite existing destination files

build:
  spec:
    description: Construct patch from modified files.
  args:
    moddir: Directory containing mod data.
  opts:
    -r|--rom: Filter patch against original rom, removing no-ops
    -m|--map: Specify ROM map instead of autodetecting.
    -p|--patch: Patch file to write. Detects format by extension.
  flags:
    --save: Create save-file patch instead of ROM patch

merge:
  spec:
    description: Merge multiple patches together.
  args+:
    patches: List of patches to merge.
  opts:
    -r|--rom: Filter against a ROM, removing no-op changes.
    -o|--out: Patch file to write. Detects format by extension.

convert:
  spec:
    description: Convert a patch from one format to another
  args:
    infile: File to convert
    outfile: File to create

diff:
  spec:
    description: Diff two files and generate a patch between the two
  args:
    original: Original ROM
    modified: Modified ROM
  opts:
    -o|--out: Patch file to write. Detects format by extension.

apply:
  spec:
    description: Apply a patch.
  args:
    patch: Patch file
    target: Patch target
  flags:
    --nobackup: Don''t make a backup.

sanitize:
  spec:
    description: Sanitize a ROM or save file with checksums etc
  args:
    target: Target file
  opts:
    -m|--map: Specify ROM map.
    -t|--type: Specify rom/save file if extension doesn''t say.
  flags:
    --nobackup: Don''t make a backup.

charmap:
  spec:
    description: Generate a text character set
  args:
    rom: ROM file
    strings: Known strings

blocks:
  spec:
    description: Search for blocks of unused space
  args:
    rom: ROM file
  opts:
    -b|--byte: Search for blocks of a specific byte
    -m|--min: Minimum block size to bother with
    -n|--num: Print only the N largest blocks   # Because windows has no head.

img:
  spec:
    description: Dump sprite images from rom
  args: !omap
    rom: ROM file to search in
    offset: Offset to start at
    count: Number of sprites to read
  opts:
    -f|--format: Format of sprite
    -z|--zoom:   Zoom the display


# an alternate approach: specify arguments and commands separately. Why
# not nest args in commands? Because we want command args that are "the
# same" to have matching confs and pull from the same line in the conf
# file.
#
# The aim here is to find a way to separate the "data schema" expected
# by the commands from the implementation details of how it's aquired
# (conf file, argparse, passing in a dict, whatever
#
# Implementation possibility: there's a chicken and egg situation where
# we need to parse the cli to get --conf, --debug, --verbose, etc, but
# we don't know the defaults until after reading --conf
#
# Possible solution: Parse the cli twice, once with only options, just
# to get --conf and --verbose (we can't parse partial args because it
# will miss things like the v in -vf). Positional args get ignored at
# this step. Then read the conf file if it's there, and re-parse the
# args with the conf file options as defaults. The only thing that needs
# customizing is "which argument to use as the config file arg"

# input:
#   rom:
#     # type defaults to str. `file` gets magic handling to build an
#     # argparse.filetype. Everything else gets looked up somehow, in
#     # locals() maybe?
#     type: file:rb
#     help: ROM file
#     alias: r
#   patch:
#     type: file:rb
#     help: include ips patch data in dump
#   target:
#     type: file
#     typearg: wb
#   patches:
#     type: files:rb
#     list: True
#   verbose:
#     type: bool
#     default: True
#     alias: v
# 
# base:
#   # most things get splatted into the toplevel parser arguments
#   description: tool for examining and modifying roms
#   args:
#     # These args are applied to all commands
#     - verbose
#     - conf
#     - debug
#     - pdb
# 
# # alt: schema: ?
# commands:
#   dump:
#     # As above, most things get splatted, except "args"
#     # Feels like args is a wart, is there some way to simplify this
#     # further? Maybe break into a "parsers" tree and a "args" tree? No,
#     # not worth it.
#     description: dump all data from a rom file
#     required:
#       - rom
#       - moddir
#     optional:
#       - map
#       - patch
#       - save
